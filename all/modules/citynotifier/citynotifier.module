<?php

module_load_include('inc', 'citynotifier');

/**
* Implements hook_menu().
*/

function citynotifier_menu() {
  $items['admin/config/citynotifier'] = array(
    'title'=>t('Amministrazione di Citynotifier'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('citynotifier_admin'),
    'access arguments' => array('citynotifier administrator'),
    'position' => 'left',
    'weight' => -4,
    'file' => 'citynotifier.admin.inc',
  );
  
  $items['admin/config/citynotifier/config'] = array(
    'title'=>t('Amministrazione di Citynotifier'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('citynotifier_admin'),
    'access arguments' => array('citynotifier administrator'),
    'position' => 'left',
    'weight' => 0,
    'file' => 'citynotifier.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  
  $items['admin/config/citynotifier/users'] = array(
    'title'=>t('Utenti'),
    'page callback' => 'citynotifier_admin_users',
    'page arguments' => array('citynotifier_admin_users'),
    'access arguments' => array('citynotifier administrator'),
    'file' => 'citynotifier.admin.inc',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK
  );
    
  $items['richieste'] = array(
    'title'=>t('Richiesta'),
    'page callback' => 'citynotifier_request',
    'access arguments' => array('access content'),
    'access callback' => true,
    'file' => 'citynotifier.request.inc',
    'type' => MENU_CALLBACK,
    );
  
  $items['segnalazione'] = array(
    'title'=>t('Segnalazione'),
    'page callback' => 'citynotifier_report',
    'access arguments' => array('access content'),
    'access callback' => true,
    'file' => 'citynotifier.report.inc',
    'type' => MENU_CALLBACK,
    );
  
  $items['notifica'] = array(
    'title'=>t('Notifica'),
    'page callback' => 'citynotifier_notify',
    'access arguments' => array('access content'),
    'access callback' => true,
    'file' => 'citynotifier.notify.inc',
    'type' => MENU_CALLBACK,
    );
  
  $items['login'] = array(
    'title'=>t('Login'),
    'page callback' => 'citynotifier_login',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
 
  $items['logout'] = array(
    'title'=>t('Logout'),
    'page callback' => 'citynotifier_logout',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
  
  $items['servers'] = array(
    'title'=>t('Server sottoscritti'),
    'page callback' => 'citynotifier_subscribed_servers',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
    
  return $items;
}

/**
 * Implements hook_theme().
 */
function citynotifier_theme() {
  $theme = array();
  $theme['citynotifier_admin'] = array(
    'render element' => 'form',
    'file' => 'citynotifier.admin.inc',
  );

  return $theme;
}

/**
* Implements hook_permission().
*/
function citynotifier_permission(){
    return array(
        'citynotifier administrator' => array(
            'title' => t('Amministratore di Citynotifier'),
            'description' => t('Utenti che possono amministrare Citynotifier'),
        ),
    );
}


/**
 * Implements hook_help().
 */
function citynotifier_help($path, $arg) {
  switch ($path) {
    case 'admin/citynotifier':
      $output = '';
      $output .= '<h3>' . t('Amministrazione di citynotifier') . '</h3>';
      $output .= '<p>' . t('Seleziona la url da dove scaricare i server da interrogare e quindi seleziona i server scelti') . '</p>';
      return $output;
  }
}

function citynotifier_cron(){
  citynotifier_sync();
  citynotifier_sync_fading();
}

/**
 * Implements login service.
 */
function citynotifier_login() {
  global $user;
  header('Content-type: application/json; charset=utf-8');
  $login = drupal_json_decode(utf8_decode(file_get_contents("php://input")));

    
  if(!$login['username'] || !$login['password']) {
    watchdog('citynotifier', t('Errore nello username o nella password per %name'), array('%name' => $login['username']), WATCHDOG_WARNING);
    drupal_add_http_header("Status", 406);
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Errore nello username o nella password"))));
    return;
  };
  
  if ($user->uid) {
    watchdog('citynotifier', t('Esiste un utente già loggato'), array(), WATCHDOG_WARNING);
    drupal_add_http_header("Status", 406);
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Esiste un utente già loggato"))));
    return;
  }

  $uid = user_authenticate($login['username'], $login['password']);
  
  if ($uid) {
    $user = user_load($uid);
    if ($user->uid) {
      user_login_finalize();
      
      watchdog('citynotifier', t('Si è loggato l\'utente %name.'), array('%name' => $user->name));
      drupal_add_http_header("Status", 200);
      echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("login effettuato con successo"), "username" => $user->name, "roles" => $user->roles, "session_id" => session_id(), "session_name" => session_name())));
      return;
    }
  }
  
  watchdog('citynotifier', t("Username o password sbagliati per %username"), array('%username' => $login['username']), WATCHDOG_WARNING);
  drupal_add_http_header("Status", 401);
  echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Username o password sbagliati"))));
  return;
}


/**
 * Implements logout service.
 */
function citynotifier_logout() {
  global $user;
  header('Content-type: application/json; charset=utf-8');

  if (!$user->uid) {
    drupal_add_http_header("Status", 406, TRUE); 
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Non c'è nessun utente per cui fare logout"))));
    return;
  }

  watchdog('citynotifier', t('Ha fatto logout l\'utente %name.'), array('%name' => $user->name));

  // Destroy the current session.
  module_invoke_all('user_logout', $user);
  session_destroy();

  // Load the anonymous user.
  $user = drupal_anonymous_user();

  drupal_add_http_header("Status", 200);
  echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("logout effettuato con successo"))));
  return;
}


/**
 * Implements Subscribed servers service.
 */
function citynotifier_subscribed_servers() {
  header('Content-type: application/json; charset=utf-8');
  
  drupal_add_http_header("Status", 200);
  echo drupal_convert_to_utf8(drupal_json_encode(citynotifier_get_subscribed_servers()));
  return;
}


/**
 *	Adds a new role
 *      @machine_name - the name of the role to be added
 *      @weight - the optional display weight for role
 */
function citynotifier_add_role($machine_name, $weight = 0)  {
	$role = new stdClass();
	$role->name = $machine_name;
	$role->weight = $weight;
	user_role_save($role);
}

