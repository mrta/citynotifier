<?php

module_load_include('inc', 'citynotifier');

/**
* Implements hook_menu().
*/

function citynotifier_menu() {
  $items['admin/citynotifier'] = array(
    'title'=>t('Amministrazione di Citynotifier'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('citynotifier_admin'),
    'access arguments' => array('citynotifier administrator'),
    'file' => 'citynotifier.admin.inc',
    'type' => MENU_CALLBACK
  );
    
  $items['richieste'] = array(
    'title'=>t('Richiesta'),
    'page callback' => 'citynotifier_request',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
  
  $items['segnalazione'] = array(
    'title'=>t('Segnalazione'),
    'page callback' => 'citynotifier_report',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
  
  $items['notifica'] = array(
    'title'=>t('Notifica'),
    'page callback' => 'citynotifier_notify',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
  
  $items['login'] = array(
    'title'=>t('Login'),
    'page callback' => 'citynotifier_login',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
 
  $items['logout'] = array(
    'title'=>t('Logout'),
    'page callback' => 'citynotifier_logout',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
  
  $items['servers'] = array(
    'title'=>t('Server sottoscritti'),
    'page callback' => 'citynotifier_subscribed_servers',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
    
  return $items;
}

/**
 * Implements hook_theme().
 */
function citynotifier_theme() {
  $theme = array();
  $theme['citynotifier_admin'] = array(
    'render element' => 'form',
    'file' => 'citynotifier.admin.inc',
  );

  return $theme;
}

/**
* Implements hook_permission().
*/
function citynotifier_permission(){
    return array(
        'citynotifier administrator' => array(
            'title' => t('Amministratore di Citynotifier'),
            'description' => t('Utenti che possono amministrare Citynotifier'),
        ),
    );
}


/**
 * Implements hook_help().
 */
function citynotifier_help($path, $arg) {
  switch ($path) {
    case 'admin/citynotifier':
      $output = '';
      $output .= '<h3>' . t('Amministrazione di citynotifier') . '</h3>';
      $output .= '<p>' . t('Seleziona la url da dove scaricare i server da interrogare e quindi seleziona i server scelti') . '</p>';
      return $output;
  }
}


/**
 * Implements login service.
 */
function citynotifier_login() {
  global $user;
  header('Content-type: application/json; charset=utf-8');
  $login = drupal_json_decode(utf8_decode(file_get_contents("php://input")));

    
  if(!$login['username'] || !$login['password']) {
    watchdog('citynotifier', t('Errore nello username o nella password per %name'), array('%name' => $login['username']), WATCHDOG_WARNING);
    drupal_add_http_header("Status", 406);
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Errore nello username o nella password"))));
    return;
  };
  
  if ($user->uid) {
    watchdog('citynotifier', t('Esiste un utente già loggato'), array(), WATCHDOG_WARNING);
    drupal_add_http_header("Status", 406);
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Esiste un utente già loggato"))));
    return;
  }

  $uid = user_authenticate($login['username'], $login['password']);
  
  if ($uid) {
    $user = user_load($uid);
    if ($user->uid) {
      user_login_finalize();
      
      watchdog('citynotifier', t('Si è loggato l\'utente %name.'), array('%name' => $user->name));
      drupal_add_http_header("Status", 200);
      echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("login effettuato con successo"), "username" => $user->name, "roles" => $user->roles, "session_id" => session_id(), "session_name" => session_name())));
      return;
    }
  }
  
  watchdog('citynotifier', t("Username o password sbagliati per %username"), array('%username' => $login['username']), WATCHDOG_WARNING);
  drupal_add_http_header("Status", 401);
  echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Username o password sbagliati"))));
  return;
}


/**
 * Implements logout service.
 */
function citynotifier_logout() {
  global $user;
  header('Content-type: application/json; charset=utf-8');

  if (!$user->uid) {
    drupal_add_http_header("Status", 406, TRUE); 
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Non c'è nessun utente per cui fare logout"))));
    return;
  }

  watchdog('citynotifier', t('Ha fatto logout l\'utente %name.'), array('%name' => $user->name));

  // Destroy the current session.
  module_invoke_all('user_logout', $user);
  session_destroy();

  // Load the anonymous user.
  $user = drupal_anonymous_user();

  drupal_add_http_header("Status", 200);
  echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("logout effettuato con successo"))));
  return;
}


/**
 * Request service.
 */
function citynotifier_request() {
  header('Content-type: application/json; charset=utf-8');
  
  $data = _citynotifier_normalize_data($_GET);

  $validation =_citynotifier_validate($data, 'request');
  
  if($validation['code'] <> 200) {
		drupal_add_http_header("Status", $validation['code'], TRUE); 
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => $validation['response'])));
    return;
	}

  $events = _citynotifier_get_local_event($data); 

  $fake_resp = array("request_time" => 1368095111,
		"result" => "Messaggio di servizio",
		"from_server" => "http://ltw1234.web.cs.unibo.it",
		"events" => $events
               );
  
  drupal_add_http_header("Status", 200);
  echo drupal_json_output($fake_resp);
}

/**
 * Report service.
 */
function citynotifier_report() {
	global $user, $skepticals;
	header('Content-type: application/json; charset=utf-8');
	
	$data = drupal_json_decode(utf8_decode(file_get_contents("php://input")));
  
	if(!$user->uid) {
		drupal_add_http_header("Status", 401);
		echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Per inviare una segnalazione bisogna essere loggati"))));
		return;
	}
	$validation = _citynotifier_validate(_citynotifier_normalize_data($data), "report");

	if($validation['code'] <> 200) {
		drupal_add_http_header("Status", $validation['code'], TRUE); 
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => $validation['response'])));
    return;
	}

	$event_exist = _citynotifier_check_event($data);
 
	if(!$event_exist || $event_exist['status'] == _citynotifier_get_index_or_value_status("archived"))
		$event_id = _citynotifier_create_event($data);
	if($event_exist['status'] == _citynotifier_get_index_or_value_status("open"))
		$event_id = $event_exist['event_id'];
	if($event_exist['status'] == _citynotifier_get_index_or_value_status("closed")){
		//status scettico cosa fare?
		_citynotifier_update_status_event($event_exist['event_id'], _citynotifier_get_index_or_value_status("skeptical"));
		$event_id = $event_exist['event_id'];
		$skepticals = array("event_id" => $event_exist['event_id'], "start_skeptical" => time(), "usrskeprtical" => array());
	}

	/* Casi
	1) Non c'è evento, crealo
	2) Evento esiste
	  1) Aperto: collega notifica a questo evento
	  2) Chiuso:
	    1) Freshness < N: mettere evento in stato scettico, chiedere agli utenti
	    2) Freshness > N: aprire un nuovo evento
	*/
	citynotifier_debug($data);
  extract(_citynotifier_get_index_type_subtype($data), EXTR_OVERWRITE);
   
  $record = array (
    "uid" => $user->uid,
    "event_id" => $event_id,
    "created" => time(),
    "type" => $type,
    "subtype" => $subtype,
    "lat" => $data['lat'],
    "lng" => $data['lng'],
    "status" => 1,
    "description" => truncate_utf8($data['description'], 255),
    );

  citynotifier_debug($record);
  if(!drupal_write_record("citynotifier_notify", $record)) {
    watchdog('citynotifier', t("Errore nella memorizzazione nel database") . '<pre>'. print_r($record, TRUE) .'</pre>', WATCHDOG_CRITICAL);
    $result = array("result" => t("Errore nella memorizzazione nel database"));
    drupal_add_http_header("Status", 500);
    echo drupal_json_output($result);
  };

  $result = array("event_id" => $record['event_id'], "result" => t("nuova segnalazione aperta con successo / segnalazione di un evento già in memoria avvenuta con successo"));
  
  drupal_add_http_header("Status", 200);
  echo drupal_json_output($result);
}


/**
 * Implements Subscribed servers service.
 */
function citynotifier_subscribed_servers() {
  header('Content-type: application/json; charset=utf-8');
  
  drupal_add_http_header("Status", 200);
  echo drupal_convert_to_utf8(drupal_json_encode(citynotifier_get_subscribed_servers()));
  return;
}

