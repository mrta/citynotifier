<?php

module_load_include('inc', 'citynotifier');

/**
* Implements hook_menu().
*/

function citynotifier_menu() {
  $items['admin/citynotifier'] = array(
    'title'=>t('Amministrazione di Citynotifier'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('citynotifier_admin'),
    'access arguments' => array('citynotifier administrator'),
    'file' => 'citynotifier.admin.inc',
    'type' => MENU_CALLBACK
  );
    
  $items['richieste'] = array(
    'title'=>t('Richiesta'),
    'page callback' => 'citynotifier_request',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
  
  $items['segnalazione'] = array(
    'title'=>t('Segnalazione'),
    'page callback' => 'citynotifier_report',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
  
  $items['notifica'] = array(
    'title'=>t('Notifica'),
    'page callback' => 'citynotifier_notify',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
  
  $items['login'] = array(
    'title'=>t('Login'),
    'page callback' => 'citynotifier_login',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
 
  $items['logout'] = array(
    'title'=>t('Logout'),
    'page callback' => 'citynotifier_logout',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
  
  $items['servers'] = array(
    'title'=>t('Server sottoscritti'),
    'page callback' => 'citynotifier_subscribed_servers',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
    );
    
  return $items;
}

/**
 * Implements hook_theme().
 */
function citynotifier_theme() {
  $theme = array();
  $theme['citynotifier_admin'] = array(
    'render element' => 'form',
    'file' => 'citynotifier.admin.inc',
  );

  return $theme;
}

/**
* Implements hook_permission().
*/
function citynotifier_permission(){
    return array(
        'citynotifier administrator' => array(
            'title' => t('Amministratore di Citynotifier'),
            'description' => t('Utenti che possono amministrare Citynotifier'),
        ),
    );
}


/**
 * Implements hook_help().
 */
function citynotifier_help($path, $arg) {
  switch ($path) {
    case 'admin/citynotifier':
      $output = '';
      $output .= '<h3>' . t('Amministrazione di citynotifier') . '</h3>';
      $output .= '<p>' . t('Seleziona la url da dove scaricare i server da interrogare e quindi seleziona i server scelti') . '</p>';
      return $output;
  }
}


/**
 * Implements login service.
 */
function citynotifier_login() {
  global $user;
  header('Content-type: application/json; charset=utf-8');
  $login = drupal_json_decode(utf8_decode(file_get_contents("php://input")));

    
  if(!$login['username'] || !$login['password']) {
    watchdog('citynotifier', t('Errore nello username o nella password per %name'), array('%name' => $login['username']), WATCHDOG_WARNING);
    drupal_add_http_header("Status", 406);
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Errore nello username o nella password"))));
    return;
  };
  
  if ($user->uid) {
    watchdog('citynotifier', t('Esiste un utente già loggato'), array(), WATCHDOG_WARNING);
    drupal_add_http_header("Status", 406);
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Esiste un utente già loggato"))));
    return;
  }

  $uid = user_authenticate($login['username'], $login['password']);
  
  if ($uid) {
    $user = user_load($uid);
    if ($user->uid) {
      user_login_finalize();
      
      watchdog('citynotifier', t('Si è loggato l\'utente %name.'), array('%name' => $user->name));
      drupal_add_http_header("Status", 200);
      echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("login effettuato con successo"), "username" => $user->name, "roles" => $user->roles, "session_id" => session_id(), "session_name" => session_name())));
      return;
    }
  }
  
  watchdog('citynotifier', t("Username o password sbagliati per %username"), array('%username' => $login['username']), WATCHDOG_WARNING);
  drupal_add_http_header("Status", 401);
  echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Username o password sbagliati"))));
  return;
}


/**
 * Implements logout service.
 */
function citynotifier_logout() {
  global $user;
  header('Content-type: application/json; charset=utf-8');

  if (!$user->uid) {
    drupal_add_http_header("Status", 406, TRUE); 
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Non c'è nessun utente per cui fare logout"))));
    return;
  }

  watchdog('citynotifier', t('Ha fatto logout l\'utente %name.'), array('%name' => $user->name));

  // Destroy the current session.
  module_invoke_all('user_logout', $user);
  session_destroy();

  // Load the anonymous user.
  $user = drupal_anonymous_user();

  drupal_add_http_header("Status", 200);
  echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("logout effettuato con successo"))));
  return;
}


/**
 * Request service.
 */
function citynotifier_request() {
   header('Content-type: application/json; charset=utf-8');
   $data = _citynotifier_citynotifier2data($_GET);
   $statuses = variable_get('citynotifier_settings_statuses', array());
   
   $validation = _citynotifier_validate($data, 'request');
   
   if($validation['code'] <> 200) {
     drupal_add_http_header("Status", $validation['code'], TRUE); 
     echo drupal_convert_to_utf8(drupal_json_encode(array("result" => $validation['response'])));
     return;
   }
   
   if ($data['scope'] == "local" ) {
     drupal_add_http_header("Status", 200);
     echo drupal_convert_to_utf8(drupal_json_encode(array("request_time" => time(),
       "result" => "Messaggio di servizio",
       "from_server" => "http://" . $_SERVER['HTTP_HOST'],
       "events" => _citynotifier_get_local_event($data))));
     return;
   };
   
   if ($data['scope'] == "remote") {
     $data = _citynotifier_data2citynotifier($data);
     
     if(isset($data['dest'])) {
       $servers = array($servers[$data['dest']]);
       unset($data['dest']);
     } else {
       $servers = citynotifier_get_subscribed_servers();
     }
     
     $fps = array();
     $data_remote = array();
     $data['scope'] == "local";

     foreach($servers as $index => $server) {
       $fp = citynotifier_get_fp_for_asynchronous_http_get_request($server['url'] . "/richieste", $data);
       if(!$fp['errno']) {
         $fps[] = array("fp" => $fp['fp'], "server" => $server['name'], "request_time" => time());
         $data_remote[$index] = '';
       } else {
         /** 200 non va bene bisogna stabilire, per esempio, se va in timeout **/
         drupal_add_http_header("Status", 200);
         echo drupal_convert_to_utf8(drupal_json_encode(array("request_time" => time(),
           "result" => $fp['errstr'],
           "from_server" => $server['name'],
           "events" => array())));
       }
     }

     while(!empty($fps)) {
       foreach($fps as $i_fp => $fp) {
         $fgets = fgets($fp['fp']);

         if (!$fgets) {
           fclose($fp['fp']);
           unset($fps[$i_fp]);
           $data_remote[$i_fp] = explode("\r\n\r\n", $data_remote[$i_fp]);
           $data_remote[$i_fp] = drupal_json_decode($data_remote[$i_fp][1]);

           foreach($data_remote[$i_fp]["events"] as $i_event => $event) {
             $data_local = _citynotifier_get_matched_remote_event(_citynotifier_citynotifier2data($event));
             if($data_local["event_id"]) {
               $data_remote[$i_fp]["events"][$i_event]["event_id"] = $data_local["event_id"];
               if(_citynotifier_get_event_freshness($data_local["event_id"]) >  $data_remote[$i_fp]["events"][$i_event]["freshness"] && $data_remote[$i_fp]["events"][$i_event]["status"] <> $statuses[$data_local["status"]]) {
                 $data_remote[$i_fp]["events"][$i_event]["status"] = "skeptical";
                 $data_local = array("event_id" => $data_local["event_id"], "status" => _citynotifier_get_index_status("skeptical"));
                 drupal_write_record("citynotifier_event", $data_local);
               };
             };
           };
         } else {
           $data_remote[$i_fp] = $data_remote[$i_fp] . $fgets;
         };
       };
     };
     drupal_add_http_header("Status", 200);
     echo drupal_convert_to_utf8(drupal_json_encode($data_remote));    
     return;
   };
};

/**
 * Report service.
 */
function citynotifier_report() {
	global $user, $skepticals;
	header('Content-type: application/json; charset=utf-8');
	
	$data = _citynotifier_citynotifier2data(drupal_json_decode(utf8_decode(file_get_contents("php://input"))));
  
	if(!$user->uid) {
		drupal_add_http_header("Status", 401);
		echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Per inviare una segnalazione bisogna essere loggati"))));
		return;
	}
	
	$validation = _citynotifier_validate($data, "report");

	if($validation['code'] <> 200) {
		drupal_add_http_header("Status", $validation['code'], TRUE); 
		echo drupal_convert_to_utf8(drupal_json_encode(array("result" => $validation['response'])));
		return;
	}

	$matched_event = _citynotifier_get_matched_event($data);

	$new_event = FALSE;
	switch ($matched_event['status']) {
	case FALSE:
	case _citynotifier_get_index_status("archived"):
	  $new_event = TRUE;
	  $event_id = _citynotifier_create_event();
	  break;
	case _citynotifier_get_index_status("open"):
	  $event_id = $matched_event['event_id'];
	  break;
	case _citynotifier_get_index_status("closed"):
	  _citynotifier_update_status_event($matched_event['event_id'], _citynotifier_get_index_status("skeptical"));
		$event_id = $matched_event['event_id'];
		break;
	case _citynotifier_get_index_status("skeptical"):
	  /** Bisogna vedere cosa fare nel caso sia una notifica su evento già skeptical **/
	  break;
	};

	/* Casi
	1) Non c'è evento, crealo
	2) Evento esiste
	  1) Aperto: collega notifica a questo evento
	  2) Chiuso:
	    1) Freshness < N: mettere evento in stato scettico, chiedere agli utenti
	    2) Freshness > N: aprire un nuovo evento
	*/
	//citynotifier_debug($data);
  
  /** Ad extra $data **/
  $data += array (
    "uid" => $user->uid,
    "event_id" => $event_id,
    "created" => time(),
    );
  
  if(!drupal_write_record("citynotifier_notify", $data)) {
    watchdog('citynotifier', t("Errore nella memorizzazione nel database") . '<pre>'. print_r($data, TRUE) .'</pre>', WATCHDOG_DEBUG);
    drupal_add_http_header("Status", 500);
    echo drupal_convert_to_utf8(drupal_json_encode(array("result" => t("Errore nella memorizzazione nel database"))));
    return;
  };

  drupal_add_http_header("Status", 200);
  echo drupal_convert_to_utf8(drupal_json_encode(array("event_id" => $data['event_id'],
                                                       "result" => $new_event?t("nuova segnalazione aperta con successo"):t("segnalazione di un evento già in memoria avvenuta con successo"))));
  return;
}


/**
 * Implements Subscribed servers service.
 */
function citynotifier_subscribed_servers() {
  header('Content-type: application/json; charset=utf-8');
  
  drupal_add_http_header("Status", 200);
  echo drupal_convert_to_utf8(drupal_json_encode(citynotifier_get_subscribed_servers()));
  return;
}

